---
description: 
globs: 
alwaysApply: true
---
# Component Studio 说明

## 概述
Component Studio 是一个强大的组件开发环境，让开发者能够创建、配置和管理可复用的组件。它通过声明式配置和实现分离的方式，实现了组件的高度可定制性和易用性。

## 工作原理
Component Studio 基于两个核心文件协同工作：
- `@metadata.json`：声明组件的元数据和可配置属性
- `index.tsx`：实现组件的渲染逻辑和交互行为

这种分离架构使得组件能够同时满足开发便捷性和使用灵活性的需求。

## 项目结构

项目需要遵循工程化思想，减少代码堆积
**重要提醒** 尤其是对于 EditComponent 可以抽离公用的配置逻辑，最后通过 JSON Schema 进行渲染

```
your-component-studio/
├── api/              # 后端API代码
│   ├── dev.ts        # 开发服务器入口
│   ├── src/          # API源代码目录
│   └── third.d.ts    # 三方库类型声明
├── scripts/          # 构建和版本管理脚本
│   ├── build-clean.mjs  # 清理构建脚本
│   └── bump-version.mjs # 版本升级脚本
├── src/              # 前端源代码
│   ├── HelloWorld/   # 示例HelloWorld区块
│   │   └── index.tsx   # 区块入口
│   │   └── @metadata.json # 区块元数据
│   │   └── @preview-images/ # 区块预览图目录
│   └── <your-component-name>/ # 你的区块目录
│   |   └── index.tsx   # 区块入口
│   |   └── @metadata.json # 区块元数据
│   |   └── @preview-images/ # 区块预览图目录
│   └── components/ # 组件目录
│   └── utils/ # 工具函数目录
│   └── types/ # 类型声明目录
├── package.json      # 项目配置和依赖
├── vite.config.mts   # Vite客户端配置
└── vite-server.config.ts # Vite服务端配置
```


## 核心功能

### 组件定义与配置
- 通过 `@metadata.json` 定义组件的基本信息和属性
- 支持丰富的属性类型（文本、数值、颜色、对象等）
- 提供多语言支持和国际化能力
- 控制属性在编辑器中的显示方式

### 组件实现与渲染
- 在 `index.tsx` 中实现组件的具体行为
- 使用 React 函数组件和 TypeScript 类型系统
- 支持自定义编辑界面（EditComponent）
- 提供响应式和交互体验

## 开发注意事项

### 上下文与依赖管理
- **避免使用 React Context** - 组件可能在无特定上下文的环境中运行，依赖上下文会导致组件失效
- **谨慎选择第三方库** - 避免使用依赖于全局上下文或特定环境的第三方库
- **依赖最小化** - 组件应尽可能减少外部依赖，确保高度独立性
- **明确依赖声明** - 必要的依赖应在文档中明确说明，并在项目配置中正确引用

### 容错与健壮性
- **防御性编程** - 实现空值检查和类型验证，防止运行时错误
- **优雅降级** - 当属性缺失或格式错误时，组件应能优雅降级而非崩溃
- **边界情况处理** - 考虑并测试极端情况（空数据、超长文本、网络错误等）
- **错误边界** - 使用 React 错误边界捕获渲染错误，避免整个应用崩溃

### 工程化与复用
- **组件封装** - 确保组件功能内聚，接口清晰，方便在不同项目中复用
- **版本控制** - 使用语义化版本管理组件更新
- **文档完善** - 提供详细的使用文档和示例，降低使用门槛
- **测试覆盖** - 编写单元测试和集成测试，确保组件质量
- **构建优化** - 配置合适的构建流程，减小打包体积

## 设计与用户体验要求

### 视觉设计原则
- **美观性** - 组件应具有现代、专业的外观，符合当代设计趋势
- **一致性** - 组件样式应与整体设计系统保持一致
- **层次感** - 使用适当的阴影、间距和颜色创造视觉层次
- **动效适度** - 添加适当的过渡动画，提升用户体验，但避免过度装饰

### 用户体验标准
- **响应灵敏** - 组件应对用户操作提供即时反馈
- **容错设计** - 妥善处理各种边缘情况和错误状态
- **直观操作** - 用户无需额外说明即可理解如何使用组件
- **可访问性** - 符合WCAG 2.1标准，支持键盘导航和屏幕阅读器

### 性能要求
- 组件初始渲染时间应控制在300ms以内
- 交互响应延迟不应超过100ms
- 优化重渲染逻辑，避免不必要的DOM更新
- 大型组件应考虑代码分割和懒加载策略

## 文件关系详解

### @metadata.json 与 index.tsx 的映射关系
- `@metadata.json` 中的 `properties.[id].data.key` 对应 `index.tsx` 中 BlockProps 的属性名
- `@metadata.json` 中的属性类型转换为 TypeScript 类型定义
- `@metadata.json` 中的默认值在 `index.tsx` 中作为组件默认参数
- `@metadata.json` 中的嵌套属性（subProperties）在 `index.tsx` 中体现为嵌套接口

### 文件依赖与更新
1. 修改 `@metadata.json` 后需同步更新 `index.tsx` 中的类型定义
2. 在 `index.tsx` 中添加新功能时，可能需要在 `@metadata.json` 中添加相应配置
3. 两个文件的同步性对组件的正常运行至关重要

## 组件开发流程
1. 在 `@metadata.json` 中定义组件属性和元数据
2. 在 `index.tsx` 中实现组件的 BlockProps 接口
3. 编写组件的渲染逻辑和行为
4. 进行视觉设计和用户体验优化
5. 可选：实现 EditComponent 提供自定义编辑体验
6. 测试组件在不同配置和设备下的表现

## 最佳实践
- 保持 `@metadata.json` 和 `index.tsx` 的同步更新
- 遵循 TypeScript 和 React 的最佳实践
- 使用语义化的属性命名
- 为组件提供合理的默认值
- 优先考虑移动端体验，实现响应式设计
- 通过用户测试验证组件的可用性
- 使用CSS变量实现主题定制能力

## 补充资源
组件开发中可参考同目录下 2 个规则
- `@metadat-json.mdc`
- `index-tsx.mdc`
